/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer>li=new ArrayList<>();
        if(root==null){
            return li;
        }
        Queue<TreeNode>qu=new LinkedList<>();
        qu.add(root);
        while(!qu.isEmpty()){
            int size=qu.size();
            int c=0;
            int max=Integer.MIN_VALUE;
           while(c!=size){
            TreeNode p=qu.poll();
           max=Math.max(p.val,max);
        
            if(p.left!=null){
                qu.add(p.left);
            }
             if(p.right!=null){
                qu.add(p.right);
            }
            c++;
        }
          li.add(max);
    }
        return li;
    }

}
