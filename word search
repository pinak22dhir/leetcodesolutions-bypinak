class Solution {
    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (recursion(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public static boolean recursion(char[][] board, String word, int x, int y, int z) {
        // If we have matched all characters
        if (z == word.length()) {
            return true;
        }
        // Check bounds and character match
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || word.charAt(z) != board[x][y] || board[x][y] == '1') {
            return false;
        }

        // Store the current cell's character
        char temp = board[x][y];
        // Mark as visited
        board[x][y] = '1'; // You can use any character that doesn't exist in the board.

        // Explore all four directions
        int[] row = {-1, 1, 0, 0}; // Up, Down
        int[] col = {0, 0, -1, 1}; // Left, Right
        
        for (int i = 0; i < 4; i++) {
            int nrow = x + row[i]; // Update nrow based on current position
            int ncol = y + col[i]; // Update ncol based on current position
            // Recursive call
             if (recursion(board, word, nrow, ncol, z + 1)){
                return true;
             }
             // If any direction returns true, word exists
            
        }
        
        // Backtrack: restore the original character
        board[x][y] = temp;
        return false; // Word not found
    }
}
