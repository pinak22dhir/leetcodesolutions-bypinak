class Solution {
    public int trapRainWater(int[][] heightMap) {
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->Integer.compare(a[2],b[2]));
        boolean[][] newi=new boolean[heightMap.length][heightMap[0].length];
        for(int i=0;i<heightMap.length;i++){
            for(int j=0;j<heightMap[0].length;j++){
                if(i==0||i==heightMap.length-1){
                    pq.add(new int[]{i,j,heightMap[i][j]});
                    newi[i][j]=true;
                }
            }
        }
        for(int j=0;j<heightMap[0].length;j++){
            for(int i=0;i<heightMap.length;i++){
                if(j==0||j==heightMap[0].length-1){
                    pq.add(new int[]{i,j,heightMap[i][j]});
                     newi[i][j]=true;
                }
            }
        }
        
        int c=0;
        while(!pq.isEmpty()){
            int top[]=pq.poll();
            int directions[][]={{0,-1},{-1,0},{0,1},{1,0}};
            int iindex=top[0];
            int jindex=top[1];
            int height=top[2];
            
            for(int i=0;i<directions.length;i++){
                int i2=iindex+directions[i][0];
                int j2=jindex+directions[i][1];
                if(i2>=0 && i2<heightMap.length && j2>=0 && j2<heightMap[0].length && newi[i2][j2]==false){
                   
                    if(heightMap[i2][j2]>height){
                        pq.add(new int[]{i2,j2,heightMap[i2][j2]});
                    }
                     if(heightMap[i2][j2]<=height){
                        c+=height-heightMap[i2][j2];
                        int maxi=Math.max(height,heightMap[i2][j2]);
                        pq.add(new int[]{i2,j2,maxi});
                    }
                       newi[i2][j2]=true;
                  
                }

            }

        }
    return c;
    }
}
