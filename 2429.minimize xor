class Solution {
    public int minimizeXor(int num1, int num2) {
        int setbits=bits(num2);
        String bit1=helper(num1);
        System.out.println(bit1);
        System.out.println(setbits);
        int c=0;
        for(int i=0;i<bit1.length();i++){
            if(bit1.charAt(i)=='1'){
                if(setbits>0){setbits--;
                c+=(int)Math.pow(2,bit1.length()-1-i);
                 System.out.println(bit1.length()-1-i);
                }
            }
        }
        for(int i=bit1.length()-1;i>=0;i--){
            if(bit1.charAt(i)=='0'){
                if(setbits>0){
                setbits--;
                System.out.println(i);
                c+=(int)Math.pow(2,bit1.length()-1-i);
                }
            }
        }
        int s=bit1.length();
        while(setbits>0){
            c+=(int)Math.pow(2,s);
            s+=1;
            setbits--;
        }
        return c;
    }
    static int bits(int num){
        int c=0;
        while(num>0){
            int last=num%2;
            if(last==1){
                c++;
            }
            num=num/2;
        }
        return c;
    }
    static String helper(int num){
        StringBuilder result=new StringBuilder();
         while(num>0){
            int last=num%2;
            if(last==1){
              result.append('1');
            }
            else{
                result.append('0');
            }
            num=num/2;
        }  
        result.reverse();
        return result.toString();
    }
}
