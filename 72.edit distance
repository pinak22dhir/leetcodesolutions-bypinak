class Solution {
    public int minDistance(String word1, String word2) {
        if(word1.isEmpty()){return word2.length();}
        if(word2.isEmpty()){return word1.length();}
        int n=word1.length();
        int m=word2.length();
        int dp[][]=new int[n+1][m+1];
       for(int i=0;i<=n;i++){
         dp[i][0]=i;
       }
       for(int i=0;i<=m;i++){
         dp[0][i]=i;
       }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
            if(word1.charAt(i-1)==word2.charAt(j-1)){
                dp[i][j]=dp[i-1][j-1];
            }
            else{
            int insert=dp[i-1][j];
            int replace=dp[i-1][j-1];
            int delete=dp[i][j-1]; 
            dp[i][j]=Math.min(insert,Math.min(replace,delete))+1;
            }
            }
        }
       return dp[n][m];
    }
    static int helper(String word1,String word2,int i,int j,int dp[][]){
        if(i<0){
            return j+1;
        }
         if(j<0){
            return i+1;
        }
        if(dp[i][j]!=-1){return dp[i][j];}
        if(word1.charAt(i)==word2.charAt(j)){
         return helper(word1,word2,i-1,j-1,dp);
        }
    
        int insert= helper(word1,word2,i,j-1,dp);
        int replace=helper(word1,word2,i-1,j-1,dp);
        int delete=helper(word1,word2,i-1,j,dp);
        
        dp[i][j]=1+ Math.min(insert,Math.min(replace,delete));
        return dp[i][j];

    }
}
