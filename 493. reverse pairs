class Solution {
public:
  

    void merge(vector<int> &nums, int lo, int mid, int hi) {
        vector<int> merged;
        
        int l = lo;
        int h = mid + 1;

        
        while (l <= mid && h <= hi) {
            if (nums[l] <= nums[h]) {
                merged.push_back(nums[l]);
                l++;
            } else {
                merged.push_back(nums[h]);
                h++;
            }
        }

        
        while (l <= mid) {
            merged.push_back(nums[l]);
            l++;
        }

        
        while (h <= hi) {
            merged.push_back(nums[h]);
            h++;
        }

       
        for (int i = lo; i <= hi; ++i) {
            nums[i] = merged[i - lo];
        }
    }

    int countpairs(vector<int> &nums, int lo, int mid, int hi) {
        int count = 0;
        int r = mid + 1;
        
        for (int i = lo; i <= mid; i++) {
            while (r <= hi && (long long)nums[i] > 2 *(long long) nums[r]) {
                r++;
            }
            count += ( r -(mid+1));
        }
        
        return count;
    }

    int mergesort(vector<int> &nums, int lo, int hi) {
        int count=0;
        if (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            count+=mergesort(nums, lo, mid);
            count+=mergesort(nums, mid + 1, hi);
            count += countpairs(nums, lo, mid, hi);
            merge(nums, lo, mid, hi);
        }
        return count;
    }

    int reversePairs(vector<int>& nums) {
       
        return  mergesort(nums, 0, nums.size() - 1);
    }
};
