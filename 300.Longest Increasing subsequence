class Solution {
    public int lengthOfLIS(int[] nums) {
        int dp[][]=new int[nums.length][nums.length+1];
    for(int row[]:dp){
        Arrays.fill(row,-1);
    }
        return helper(0,-1,nums.length,nums,dp);
    }
    static int helper(int i,int prev,int n,int[] nums,int dp[][]){
       if(i==nums.length){
        return 0;
       }
       if(dp[i][prev+1]!=-1){return dp[i][prev+1];}
       int ntake=helper(i+1,prev,n,nums,dp);
        int take=0;
        if(prev==-1||nums[i]>nums[prev]){
        take=1+helper(i+1,i,n,nums,dp);
        }
       
       dp[i][prev+1]=Math.max(ntake,take);
       return Math.max(take,ntake);
    }
}
