class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int max=Integer.MIN_VALUE;
        int n=bloomDay.length-1;
        for(int i=0;i<bloomDay.length-1;i++){
         max=Math.max(max,bloomDay[i]);
        }

        int ans=binary(bloomDay,1,max,m,k);
    
        return ans;
        
    }
    static int binary(int arr[],int s,int e,int m,int k){
        int l=s;
        int r=e;
        int si=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(all(mid,arr,m,k)){
                si=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }return si;

    }
    static boolean all(int mid,int arr[],int mi,int k){
        int sum=0;
        int m=0;
        int c=0;
        int newarr[]=new int[arr.length];
        System.out.print(mid);
        for(int i=0;i<arr.length;i++){
        if(arr[i]<=mid){
            newarr[i]=1;
            c=c+1;
        }
        else{
            if(c>=k){
                System.out.print(c);
                m+=c/k;
            }
            c=0; 
        }
        }
        if(c!=0){
            m+=c/k;
        }
        if(mid==1){
            System.out.print(Arrays.toString(newarr));
        }
        return m>=mi;
    }
}
