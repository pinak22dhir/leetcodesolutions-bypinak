/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 int L(ListNode* headA)
 { int c=0;
 ListNode* temp=headA;
 while(temp!=NULL){
    temp=temp->next;
    c++;
 }

 return c;

 }
 ListNode* collision(ListNode* h1,ListNode* h2,int d)
 { ListNode* temp=h2;
   ListNode* temp2=h1;
  while(d!=0){
    temp=temp->next;
    d--;
  }
  while(temp!=NULL)
  {
    if(temp==temp2){
        return temp;
    }
    temp=temp->next;
    temp2=temp2->next;
  }
  return NULL;
 }
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==NULL|| headB==NULL) return NULL;
        int l1=L(headA);
        int l2=L(headB);
        if(l1<l2){
          return collision( headA,headB,l2-l1);
        }
        else{
             return collision(headB,headA,l1-l2);
        }

    }
};
