class Solution {
    public int maxProfit(int[] prices) {
        int dp[][]=new int[prices.length+1][2];
        int n=prices.length;
        dp[n][0]=0;
        dp[n][1]=0;
       for(int index=prices.length-1;index>=0;index--){
            for(int j=0;j<2;j++){
              int profit=0;
        if(j==1){
          profit= Math.max(-prices[index]+dp[index+1][0],dp[index+1][1]);
        }
        else{
        profit= Math.max(prices[index]+dp[index+1][1],dp[index+1][0]);
        }
        dp[index][j]=profit;
            }
        }

       return dp[0][1]; 
    }
    static int helper(int index,int buy,int[] prices,int dp[][]){
        if(index==prices.length){
            return 0;
        }
        if(dp[index][buy]!=-1){return dp[index][buy];}
        int profit=0;
        if(buy==1){
          profit= Math.max(-prices[index]+helper(index+1,0,prices,dp),helper(index+1,1,prices,dp));
        }
        else{
        profit= Math.max(prices[index]+helper(index+1,1,prices,dp),helper(index+1,0,prices,dp));
        }
        dp[index][buy]=profit;
        return profit;
    }
}
