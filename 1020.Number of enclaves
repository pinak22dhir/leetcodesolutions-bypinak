class Solution {
    class Pair{
        int fi;
        int si;
        Pair(int fst,int sec)
        {
            this.fi=fst;
            this.si=sec;
        }
    }
    public int numEnclaves(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            { if(i==0||i==n-1||j==0||j==m-1){
                if(grid[i][j]==1)
                {
                  bfs(grid,i,j);
                }
             }
            }
        }
         for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
             System.out.print(grid[i][j]+" ");
            }
            System.out.println();
        }
        int c=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                  c+=1;
                }
            }
        }
        return c;
        
    }
    void bfs(int[][] grid,int i,int j)
    {  
    int n=grid.length;
    int m=grid[0].length;
      Queue<Pair> qu=new LinkedList<>();
      grid[i][j]=2;
      qu.add(new Pair(i,j));
      while(!qu.isEmpty())
      {
        Pair pi=qu.poll();
        int row[]={-1,1,0,0};
        int col[]={0,0,-1,1};
         for(int k=0;k<4;k++){
            int nrow=row[k]+pi.fi;
            int ncol=col[k]+ pi.si;
            if(nrow>=0 && nrow<=n-1 && ncol>=0 && ncol<=m-1 && grid[nrow][ncol]==1)
            {
               grid[nrow][ncol]=2;
               qu.add(new Pair(nrow,ncol));
            }

         }
      }
    }
}
