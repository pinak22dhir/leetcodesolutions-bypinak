class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int visited[]=new int[numCourses];
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();

        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        int  indegree[]=new int[numCourses];
        for(int i=0;i<prerequisites.length;i++){
  
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
            indegree[prerequisites[i][0]]++;
        
        }
        System.out.print(Arrays.toString(indegree));
      
Queue<Integer>qu=new LinkedList<>();int c=0;
      for(int i=0;i<numCourses;i++){
          if(indegree[i]==0){
            System.out.print(i);
              qu.add(i);
              c++;
          }
      }
      while(!qu.isEmpty()){
          int a=qu.poll();
  
          for(int i:adj.get(a)){
              indegree[i]--;
              if(indegree[i]==0){
                  qu.add(i);
                  c++;
              }
          }
    
       }
   return c==adj.size();
    }
}
