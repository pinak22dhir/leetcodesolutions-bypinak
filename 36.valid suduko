class Solution {
   
    public boolean isValidSudoku(char[][] board) {
        return validSuduko(board);
    }
     public boolean validSuduko(char[][] board){
       
        for(int i=0;i<9;i++){
              Set<Character>set=new HashSet<>();
              Set<Character>set2=new HashSet<>();
            for(int j=0;j<9;j++){
                if(board[i][j]!='.'){
                if(set.contains(board[i][j])){return false;}
                 set.add(board[i][j]);
                
                }
                
                if(board[j][i]!='.'){
                  if(set2.contains(board[j][i])){return false;}
                 set2.add(board[j][i]);
                }   
           }
        }
    
              for (int boxRow = 0; boxRow < 9; boxRow += 3) {
            for (int boxCol = 0; boxCol < 9; boxCol += 3) {
                Set<Character> set = new HashSet<>();
                for (int i = boxRow; i < boxRow + 3; i++) {
                    for (int j = boxCol; j < boxCol + 3; j++) {
                        char c = board[i][j];
                        if (c == '.') continue;
                        if (set.contains(c)) return false;
                        set.add(c);
                    }
                }
            }
        }

        return true;
    }
}
