class Solution {
    public long countFairPairs(int[] nums, int lower, int upper) {
        return helper(0,0,nums,0,lower,upper);
    }
    static long helper(int sum,int counti,int nums[],int index,int lo,int upp){ 
       Arrays.sort(nums);
       long result=0;
       for(int i=0;i<nums.length;i++){
        int l=i+1;
        int r=nums.length-1;
        int count=0;
        int low=binaryl(l,r,lo-nums[i],nums);
        int high=binaryh(l,r,upp-nums[i],nums);
        if(low<=high && low!=-1 && high!=-1){
          result+=high-low+1;
        }
       }
       return result;
    }
    static int binaryl(int l,int r,int target,int nums[]){
        int ans=-1;
            
        while(l<=r){
            int mid=l+(r-l)/2;
            
            if(nums[mid]>=target){
             ans=mid;
             r=mid-1;
            }
            else { l=mid+1;
        }
        }
        return ans;
    }
    static int binaryh(int l,int r,int target,int nums[]){
        int ans=-1;
            
        while(l<=r){
            int mid=l+(r-l)/2;
           
             if(nums[mid]<=target){
              ans=mid;
              l=mid+1;
            }
            else{
            r=mid-1;
        }
        }
        return ans;
    }
}
