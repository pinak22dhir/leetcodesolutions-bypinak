class Solution {
    class Pair{
        int fi;
        int sec;
        Pair(int f,int s)
        {
            this.fi=f;
            this.sec=s;
        }
    }
    public void solve(char[][] board) {
    
        int n=board.length;
        int m=board[0].length;  
        for(int l=0;l<n;l++)
        {
        for(int p=0;p<m;p++){
           if(l==0||l==n-1|| p==0|| p==m-1){
            if(board[l][p]=='O'){
             bfs(board,l,p);
             }
            }
        }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }
                if(board[i][j]=='T'){
                    board[i][j]='O';
                }
            }
        }
    }
  void bfs(char[][] board,int i,int j)
 { int n=board.length;
   int m=board[0].length;
   Queue<Pair> qu=new LinkedList<>();
   qu.add(new Pair(i,j));
   board[i][j]='T';
   while(!qu.isEmpty())
   {
    Pair top=qu.poll();
     int row[]={-1,1,0,0};
     int col[]={0,0,-1,1};
     for(int k=0;k<4;k++)
     {
        int nrow=row[k]+top.fi;
        int ncol=col[k]+top.sec;
        while(nrow>=0 && nrow<=n-1 && ncol>=0 && ncol<=m-1 && board[nrow][ncol]=='O'){
            board[nrow][ncol]='T';
            qu.add(new Pair(nrow,ncol));
        }
     }
   }
 }
   
}
        
